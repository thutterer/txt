{"version":3,"sources":["logo.png","components/Note.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Note","document","getElementById","this","props","id","focus","element","fullscreenElement","exitFullscreen","parentElement","requestFullscreen","className","value","onChange","event","handleChange","target","title","onClick","goFullscreen","height","version","viewBox","width","d","length","style","position","bottom","right","zIndex","deleteNote","React","Component","App","state","notes","bind","addNote","setState","prevState","concat","Date","now","newValue","map","note","filter","restoredNotes","JSON","parse","localStorage","getItem","setItem","stringify","notesComponents","key","href","src","logo","alt","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mFAAAA,EAAOC,QAAU,IAA0B,kC,8NCgD5BC,G,8LA3CXC,SAASC,eAAT,eAAgCC,KAAKC,MAAMC,KAAMC,U,mCAGtCC,GACNN,SAASO,kBAGRP,SAASQ,gBACXR,SAASQ,iBAHXR,SAASC,eAAT,eAAgCC,KAAKC,MAAMC,KAAMK,cAAcC,sB,+BAQzD,IAAD,OAOP,OACE,yBAAKC,UAAU,QACb,8BACEP,GAAE,eAAUF,KAAKC,MAAMC,IACvBQ,MAAOV,KAAKC,MAAMS,MAClBC,SAAU,SAACC,GAAD,OAAW,EAAKX,MAAMY,aAAa,EAAKZ,MAAMC,GAAIU,EAAME,OAAOJ,UAE3E,gCACE,4BAAQD,UAAU,OAAOM,MAAM,aAAaC,QAAS,SAACJ,GAAD,OAAW,EAAKK,aAAaL,EAAMR,WACtF,yBAAKc,OAAO,OAAOC,QAAQ,MAAMC,QAAQ,YAAYC,MAAM,QACzD,0BAAMC,EAAE,kDACR,0BAAMA,EAAE,iDACR,0BAAMA,EAAE,mDACR,0BAAMA,EAAE,sDAIe,IAA5BtB,KAAKC,MAAMS,MAAMa,QAAgB,4BAAQC,MAvBtB,CACtBC,SAAU,WACVC,OAAQ,MAAOC,MAAO,MACtBC,OAAQ,KAoB4DZ,QAAS,kBAAM,EAAKf,MAAM4B,WAAW,EAAK5B,MAAMC,MAAhF,U,GAvCvB4B,IAAMC,YC8EVC,E,kDA1Eb,aAAe,IAAD,8BACZ,gBACKC,MAAQ,CACXC,MAAO,IAET,EAAKrB,aAAe,EAAKA,aAAasB,KAAlB,gBACpB,EAAKN,WAAa,EAAKA,WAAWM,KAAhB,gBAClB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBAPH,E,sDAWZnC,KAAKqC,UAAS,SAAAC,GACZ,MAAO,CACLJ,MAAOI,EAAUJ,MAAMK,OAAO,CAACrC,GAAIsC,KAAKC,MAAO/B,MAAO,W,mCAK/CR,EAAIwC,GACf1C,KAAKqC,UAAS,SAAAC,GAOZ,MAAO,CACLJ,MAPmBI,EAAUJ,MAAMS,KAAI,SAAAC,GAIvC,OAHIA,EAAK1C,KAAOA,IACd0C,EAAKlC,MAAQgC,GAERE,W,iCAQF1C,GACTF,KAAKqC,UAAS,SAAAC,GAIZ,MAAO,CACLJ,MAJmBI,EAAUJ,MAAMW,QAAO,SAAAD,GAC1C,OAAOA,EAAK1C,KAAOA,W,0CASvB,IAAM4C,EAAgBC,KAAKC,MAAMC,aAAaC,QAAQ,gBACtDlD,KAAKqC,SAASS,GAAgC,CAACZ,MAAO,CAAC,CAAChC,GAAI,EAAGQ,MAAO,S,2CAItEuC,aAAaE,QAAQ,cAAeJ,KAAKK,UAAUpD,KAAKiC,U,+BAGhD,IAAD,OACDoB,EAAkBrD,KAAKiC,MAAMC,MAAMS,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAMU,IAAKV,EAAK1C,GAAIA,GAAI0C,EAAK1C,GAAIQ,MAAOkC,EAAKlC,MAAOG,aAAc,EAAKA,aAAcgB,WAAY,EAAKA,gBAE3J,OACE,yBAAKpB,UAAU,OACb,4BAAQA,UAAU,cAChB,uBAAG8C,KAAK,qCACN,yBAAKC,IAAKC,IAAMhD,UAAU,WAAWiD,IAAI,WAI7C,8BACGL,GAGH,6BACA,4BAAQ5C,UAAU,SAASO,QAAShB,KAAKoC,SAAzC,U,GArEUN,IAAMC,WCMlB4B,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzC,QACfmC,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAASR,KAMlBM,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUT,WAO5BU,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxF,SAASC,eAAe,SDYnB,SAAkBoE,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAImB,IAAIC,OAAwB3B,OAAOC,SAASP,MACpDkC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMsB,OAAN,sBAEP7B,IAgEV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,EAAO,CACX0B,QAAS,CAAE,iBAAkB,YAE5BrB,MAAK,SAAAsB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C7B,UAAUC,cAAc6B,MAAM3B,MAAK,SAAAC,GACjCA,EAAa2B,aAAa5B,MAAK,WAC7BV,OAAOC,SAASsC,eAKpBnC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAsB,CAAwBnC,EAAOC,GAI/BC,UAAUC,cAAc6B,MAAM3B,MAAK,WACjCO,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OClC/BE,K","file":"static/js/main.5236da86.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.e35fa18e.png\";","import React from \"react\"\nimport './Note.css';\n\nclass Note extends React.Component {\n  componentDidMount() {\n    document.getElementById(`note-${this.props.id}`).focus()\n  }\n\n  goFullscreen(element) {\n    if (!document.fullscreenElement) {\n      document.getElementById(`note-${this.props.id}`).parentElement.requestFullscreen();\n    } else {\n      if (document.exitFullscreen) {\n        document.exitFullscreen();\n      }\n    }\n  }\n\n  render() {\n    const deleteBtnStyles = {\n      position: 'absolute',\n      bottom: '1em', right: '1em',\n      zIndex: 100\n    }\n\n    return (\n      <div className=\"note\">\n        <textarea\n          id={`note-${this.props.id}`}\n          value={this.props.value}\n          onChange={(event) => this.props.handleChange(this.props.id, event.target.value)}\n        />\n        <footer>\n          <button className=\"icon\" title=\"Fullscreen\" onClick={(event) => this.goFullscreen(event.element)}>\n            <svg height=\"100%\" version=\"1.1\" viewBox=\"0 0 36 36\" width=\"100%\">\n              <path d=\"m 10,16 2,0 0,-4 4,0 0,-2 L 10,10 l 0,6 0,0 z\"></path>\n              <path d=\"m 20,10 0,2 4,0 0,4 2,0 L 26,10 l -6,0 0,0 z\"></path>\n              <path d=\"m 24,24 -4,0 0,2 L 26,26 l 0,-6 -2,0 0,4 0,0 z\"></path>\n              <path d=\"M 12,20 10,20 10,26 l 6,0 0,-2 -4,0 0,-4 0,0 z\"></path>\n            </svg>\n          </button>\n        </footer>\n        {this.props.value.length === 0 && <button style={deleteBtnStyles} onClick={() => this.props.deleteNote(this.props.id)}>-</button>}\n      </div>\n    )\n  }\n}\n\nexport default Note\n","import React from 'react';\nimport logo from './logo.png';\nimport './App.css';\nimport Note from './components/Note.js'\n\n\nclass App extends React.Component {\n  constructor() {\n    super()\n    this.state = {\n      notes: []\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.deleteNote = this.deleteNote.bind(this)\n    this.addNote = this.addNote.bind(this)\n  }\n\n  addNote() {\n    this.setState(prevState => {\n      return {\n        notes: prevState.notes.concat({id: Date.now(), value: ''})\n      }\n    })\n  }\n\n  handleChange(id, newValue) {\n    this.setState(prevState => {\n      const updatedNotes = prevState.notes.map(note => {\n        if (note.id === id) {\n          note.value = newValue\n        }\n        return note\n      })\n      return {\n        notes: updatedNotes\n      }\n    })\n  }\n\n  deleteNote(id) {\n    this.setState(prevState => {\n      const updatedNotes = prevState.notes.filter(note => {\n        return note.id !== id\n      })\n      return {\n        notes: updatedNotes\n      }\n    })\n  }\n\n  componentDidMount() {\n    const restoredNotes = JSON.parse(localStorage.getItem('react-notes'))\n    this.setState(restoredNotes ? restoredNotes : {notes: [{id: 1, value: ''}]})\n  }\n\n  componentDidUpdate() {\n    localStorage.setItem('react-notes', JSON.stringify(this.state))\n  }\n\n  render() {\n    const notesComponents = this.state.notes.map(note => <Note key={note.id} id={note.id} value={note.value} handleChange={this.handleChange} deleteNote={this.deleteNote} />)\n\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <a href=\"https://github.com/thutterer/txt/\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          </a>\n        </header>\n\n        <main>\n          {notesComponents}\n        </main>\n\n        <br/>\n        <button className=\"addBtn\" onClick={this.addNote}>+</button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}